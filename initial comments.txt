/**
 * @author Thyagesh Manikandan (A0100124J)
 * 
 * 
 *         This class runs the whole TextBuddy program which is based on a few
 *         simple commands: - add, delete, clear, display and exit. The
 *         functionality of the program is based on this sample input/output
 *         given:
 * 
 *         c:> TextBuddy mytextfile.txt (OR c:>java TextBuddy mytextfile.txt)
 *         Welcome to TextBuddy. mytextfile.txt is ready for use 
 *         command: add little brown fox 
 *         added to mytextfile.txt: “little brown fox” 
 *         command: display
 *         1. little brown fox 
 *         command: add jumped over the moon 
 *         added to mytextfile.txt: “jumped over the moon” 
 *         command: display 
 *         1. little brown fox 
 *         2. jumped over the moon
 *         command: delete 2 
 *         deleted from mytextfile.txt: “jumped over the moon”
 *         command: display
 *         1. little brown fox
 *         command: clear
 *         all content deleted from mytextfile.txt
 *         command: display
 *         mytextfile.txt is empty
 *         command: exit
 *         c:>
 * 
 *         *********************************************************************
 *         					********Assumptions********* 
 *         - if an unknown command is given, let the user know that it is an unknown command 
 *         - if the given file has problems or the program is unable to create a file
 *         with the given name, exit gracefully
 *         - if "display" is followed by any other characters, just display
 *         - user command is not case sensitive 
 *         - an add command with no parameters is taken as a newline request 
 *         - if the given files exists, load the data from it so that an
 *         initial display call can be made
 */

// class comments:
	/*
	 * the private attributes include: 
	 * a string for the name file being used 
	 * a BufferedWriter object to allow for writing to/saving the file
	 * a linked-list of strings for quick local executions before saving into file
	 * a Scanner object to parse the user input
	 * an autosaver thread that does the actual modification of the file 
	 * a linkedblockingqueue to save the changes which is then read by our autosaver while saving 
	 * _hasEnded to notify the autosaver that the program has been terminated
	 * _hasNotClosed is so that housekeeping is not re-done
	 */